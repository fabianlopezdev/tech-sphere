---
import type { CarouselBannerProps } from './types'
import { getTranslation } from '@shared/utils/i18n/useTranslation'
import type { Locale } from '@shared/utils/i18n/types'

const {
  locale,
  messages: customMessages,
  separator = '*',
} = Astro.props as CarouselBannerProps & { locale: Locale }
const t = (key: string) => getTranslation(locale, key)

const defaultMessages = [
  t('carouselBanner.defaultMessages.message1'),
  t('carouselBanner.defaultMessages.message2'),
  t('carouselBanner.defaultMessages.message3'),
]

const messages = customMessages && customMessages.length > 0 ? customMessages : defaultMessages

// Define a type for the message object
type MessageObject = {
  title: string
  description: string
}

// Type for messages array (either string or MessageObject)
type Message = string | MessageObject
---

<div class="banner-container">
  <div class="carousel-banner">
    <div class="carousel-text" id="carousel-text">
      {
        (messages as Message[]).map((msg: Message, i: number) => (
          <>
            <span class="message">
              {typeof msg === 'string' ? msg : `${msg.title} ${msg.description}`}
            </span>
            {i < messages.length && <span class="carousel-star">{separator}</span>}
          </>
        ))
      }
      {/* Repeat for the duplicated content */}
      {
        (messages as Message[]).map((msg: Message, i: number) => (
          <>
            <span class="message">
              {typeof msg === 'string' ? msg : `${msg.title} ${msg.description}`}
            </span>
            {i < messages.length && <span class="carousel-star">{separator}</span>}
          </>
        ))
      }
    </div>
  </div>
  <div class="banner-tooltip">{t('carouselBanner.tooltip')}</div>
</div>

<style>
  /* Local component variables */
  :root {
    --carousel-text-dark: var(--color-text-dark);
    --carousel-text-light: var(--color-text-light);
    --carousel-accent: var(--color-accent, deeppink);
  }

  /* --- Base Styles (Mobile First / Screens < 1020px) --- */
  .banner-container {
    padding-block-start: clamp(2rem, 5vw, 5rem);
    width: 105vw; /* full width in normal flow */
    margin-bottom: 0.5rem;
    /* no positioning here so it flows on small screens */
  }

  /* Tooltip is hidden by default */
  .banner-tooltip {
    position: fixed;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    padding: 0.3rem 0.6rem;
    background: var(--carousel-accent);
    color: #fff;
    font-size: 1.2rem;
    border-radius: 0.3rem;
    opacity: 0; /* hide */
    pointer-events: none;
    white-space: nowrap;
    z-index: 1000;
    transition: opacity var(--transition-medium); /* fade transition */
  }

  /* Show tooltip when hovering anywhere over the banner */
  .banner-container:hover .banner-tooltip {
    opacity: 1;
  }

  .carousel-banner {
    position: relative; /* make it the positioning context */
    transform: rotate(-2deg);
    height: clamp(2rem, 0.909rem + 4.848vw, 4rem);
    overflow: hidden;
    color: var(--carousel-text-dark);
    border: 1px solid var(--carousel-text-dark);
    display: flex;
    align-items: center;
    pointer-events: auto;
    width: 100%;
    background-color: var(--carousel-text-light);
  }

  body.dark .carousel-banner {
    background-color: var(--text-dark);
    color: var(--carousel-text-light);
    border: 1px solid var(--carousel-text-light);
  }
  body.dark {
    background-color: #222;
    color: var(--carousel-text-light);
  }

  .carousel-text {
    display: inline-flex;
    align-items: center;
    white-space: nowrap;
    font-size: clamp(1rem, 0.455rem + 2.424vw, 2rem);
    will-change: transform;
    animation: scroll-left 15s linear infinite;
  }

  .carousel-star {
    color: var(--carousel-accent);
    font-size: 2.5rem;
    margin-inline: 1rem;
    line-height: 1;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding-top: 0.8rem;
  }

  @keyframes scroll-left {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  /* pulse the stars on hover */
  .carousel-banner:hover .carousel-star {
    animation: pulse 1.5s ease-in-out infinite alternate;
  }

  /* gradient overlay */
  .carousel-banner::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      120deg,
      rgba(255, 0, 150, 0.5),
      rgba(0, 200, 255, 0.5),
      rgba(255, 200, 0, 0.5)
    );
    mix-blend-mode: overlay;
    opacity: 0;
    transition: opacity var(--transition-slow);
    background-size: 200% 200%;
    pointer-events: none;
    z-index: 1;
  }

  .carousel-banner:hover::before {
    opacity: 1;
    animation: gradient-move 3s infinite linear;
  }

  @keyframes pulse {
    from {
      transform: scale(1);
      text-shadow: none;
    }
    to {
      transform: scale(1.3);
      text-shadow: 0 0 12px var(--carousel-accent);
    }
  }

  @keyframes gradient-move {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* --- Large Screen Overrides (>= 1020px) --- */
  @media (min-width: 1020px) {
    .banner-container {
      padding-block-start: 0rem;
      position: absolute;
      bottom: -10%;
      left: 70%;
      width: 150%;
      height: 4rem;
      margin-block: 0;
    }

    .carousel-banner {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      transform: rotate(-35deg);
      transform-origin: bottom left;
      padding-block: 0;
    }

    .carousel-text {
      font-size: 2rem;
    }
    .carousel-star {
      font-size: 3rem;
      margin-inline: 1.5rem;
      padding-top: 1.2rem;
    }
  }
</style>
