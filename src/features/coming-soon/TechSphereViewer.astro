---
import type { Locale } from '@shared/utils/i18n/types'
import { getTranslation } from '@shared/utils/i18n/useTranslation'

export interface Props {
  locale: Locale
}

const { locale } = Astro.props
const t = (key: string) => getTranslation(locale, key)

// Prepare translations for the sphere viewer
const sphereViewerTranslations = {
  webglNotSupportedMessage1: t('sphereViewer.webglNotSupported.message1'),
  webglNotSupportedMessage2: t('sphereViewer.webglNotSupported.message2'),
  sceneInitErrorTitle: t('sphereViewer.sceneInitError.title'),
  sceneInitErrorMessage1: t('sphereViewer.sceneInitError.message1'),
  sceneInitErrorMessage2: t('sphereViewer.sceneInitError.message2'),
  loadingModel: t('sphereViewer.loadingModel'),
}
---

{/* Pass translations to sphereViewer.js */}
<script is:inline define:vars={{ translations: sphereViewerTranslations }} type="module">
  // Create a script element with the translations
  const scriptElement = document.createElement('script')
  scriptElement.type = 'application/json'
  scriptElement.id = 'sphere-viewer-translations'
  scriptElement.textContent = JSON.stringify(translations)
  document.body.appendChild(scriptElement)
</script>

{/* The main script for the 3D viewer */}
<script src="/src/scripts/coming-soon/sphereViewer.js"></script>

<div
  id="sphere-canvas"
  style="width: 100%; height: clamp(12.5rem, 7.822rem + 20.79vw, 25rem);"
  role="img"
  aria-label={t('techSphereViewer.ariaLabel')}
  aria-live="polite"
>
  {
    /* Fallback content or loading messages will be injected here by sphereViewer.js using the translations provided above */
  }
</div>
