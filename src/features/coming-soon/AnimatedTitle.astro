---
import { AnimatedTitlePropsSchema } from './types'

const props = AnimatedTitlePropsSchema.parse(Astro.props)
const { title = 'TECH', className = '' } = props
const titleParts = title.split(' ')
const mainPart = titleParts[0] || 'TECH'
const secondPart = titleParts[1] || 'SPHERE'
---

<div id="title-wrapper" class:list={['title-wrapper', className]}>
  <h1 class="title">
    <span class="title-main">
      {
        mainPart.split('').map((char: string, i: number) => (
          <span class="char" style={`--i: ${i}`}>
            {char}
          </span>
        ))
      }
    </span>
    <span class="title-second">
      {
        secondPart.split('').map((char: string, i: number) => (
          <span class="char" style={`--i: ${i}`}>
            {char}
          </span>
        ))
      }
    </span>
  </h1>
</div>

<script>
  // Check dark mode on the client side
  const titleWrapper = document.getElementById('title-wrapper')
  if (document.documentElement.classList.contains('dark') && titleWrapper) {
    titleWrapper.classList.add('dark')
  }

  // Listen for theme changes
  document.addEventListener('theme-changed', (e) => {
    // Cast to CustomEvent with the expected detail structure
    const customEvent = e as CustomEvent<{ isDark: boolean }>
    if (customEvent.detail.isDark && titleWrapper) {
      titleWrapper.classList.add('dark')
    } else if (titleWrapper) {
      titleWrapper.classList.remove('dark')
    }
  })
</script>

<style>
  .title-wrapper {
    text-align: center;
    margin-block-start: var(--space-md);
  }

  .title {
    font-size: clamp(5rem, 12vw, 10rem);
    margin: 0;
    line-height: 0.85;
    font-family: 'YourFinalFontName', 'Arial Black', Gadget, sans-serif;
    letter-spacing: normal;
    overflow-wrap: break-word;
    max-width: 100%;
    flex-shrink: 0;
  }

  .title-main {
    display: block;
    color: var(--color-text-dark);
    transition: color var(--transition-medium);
  }

  /* Target both parent and self dark mode classes */
  :global(.dark) .title-main,
  .dark .title-main {
    color: #f8f8f8 !important; /* Slightly off-white for better visibility */
  }

  .title-second {
    display: block;
    font-size: clamp(3.4rem, 8vw, 6.8rem);
    font-weight: normal;
    color: var(--color-accent);
    letter-spacing: -0.05em;
  }

  .char {
    display: inline-block;
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.5s cubic-bezier(0.2, 0.6, 0.3, 1) forwards;
    animation-delay: calc(0.05s * var(--i, 0));
  }

  .title-second .char {
    animation-delay: calc(0.3s + 0.03s * var(--i, 0));
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .char {
      animation: none !important;
      opacity: 1 !important;
      transform: none !important;
    }
  }
</style>
